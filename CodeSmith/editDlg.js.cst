<%-- 
Name: 编辑修改JS
Author: yubaolee
Description: 编辑修改JS
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Encoding="utf-8" Description="添加模块" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context"
Description="连接的数据库" %>
<%@ Property Name="ModuleName" Type="String" Category="Context" Description="模块名称" %>
<%@ Map Name="CSharpAlias" Src="System-CSharpAlias" Description="System to C# Type Map" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Src="Util.cs" %>
<%@ Import Namespace="Util" %>


//grid列表模块
function MainGrid() {
    var url = '/<%=ModuleName%>/Load?parentId=';
    var selectedId = 0; //ztree选中的模块
    this.maingrid = $('#maingrid').datagrid({
        showToolbar: false,
        filterThead: false,
        target: $(this),
        columns: [
        <% foreach (ColumnSchema column in this.SourceTable.Columns) {  %>
               {
                    name: '<%=column.Name%>',
                    label: '<%=Tools.GetDescription(column)%>',
                     width: 100
                    <%if(column.IsPrimaryKeyMember){ %>
                    , hide: true
                    <%} %>
                    <%else if(CSharpAlias[column.SystemType.FullName] == "bool") {%>
                     ,align: 'center',
                    items: [{ 'false': '否' }, { 'true': '是' }],
                    <%} %>  
                      <%else if(CSharpAlias[column.SystemType.FullName] == "int") {%>
                     , align: 'center',
                    items: [{ '0': '默认' }, { '1': '状态1' }],
                    <%} %>  
               },    
             <% } %>
        ],
        dataUrl: url + selectedId,
        fullGrid: true,
        showLinenumber: true,
        showCheckboxcol: true,
        paging: true,
        filterMult: false,
        showTfoot: false,
        height: '100%'
    });
    this.reload = function (id) {
        if (id != undefined) selectedId = id;
        this.maingrid.datagrid('reload', { dataUrl: url+ selectedId });
    };
};
MainGrid.prototype = new Grid();
var list = new MainGrid();

//左边分类导航树
var ztree = function () {
    var url = '/<%=ModuleName%>/LoadForTree';
    var setting = {
        view: { selectedMulti: false },
        data: {
            key: {
                name: 'Name',
                title: 'Name'
            },
            simpleData: {
                enable: true,
                idKey: 'Id',
                pIdKey: 'ParentId',
                rootPId: 'null'
            }
        },
        callback: { onClick: zTreeOnClick }
    };
    $.getJSON(url, function (json) {
        $.fn.zTree.init($("#tree"), setting, json).expandAll(true);
    });
    function zTreeOnClick(event, treeId, treeNode) {
        list.reload(treeNode.Id);
    }

    return {
        reload:function() {
            $.getJSON(url, function (json) {
                 $.fn.zTree.init($("#tree"), setting, json).expandAll(true);
            });
        }
    }
}();

<%if(Tools.NeedCascade(SourceTable)){ %>
//编辑时，选择上级弹出的树
var parentTree = function () {
    var nameDom = "#ParentName";
    var idDom = "#ParentId";
    var zTreeObj;
    var setting = {
        view: {
            selectedMulti: false
        },
        check: {
            enable: true,
            chkStyle: "radio",  //单选
            radioType: "all"
        },
        data: {
            key: {
                name: 'Name',
                title: 'Name'
            },
            simpleData: {
                enable: true,
                idKey: 'Id',
                pIdKey: 'ParentId',
                rootPId: 'null'
            }
        },
        callback: {
            onClick: zTreeOnClick,
            onCheck: zTreeCheck
        }
    };

    function zTreeCheck(event, treeId, treeNode) {
        var nodes = zTreeObj.getCheckedNodes(true);
        var ids = nodes.map(function (e) { return e.Id; }).join(",");
        var names = nodes.map(function (e) { return e.Name; }).join(",");

        $(nameDom).val(names);
        $(idDom).val(ids);
    }
    function zTreeOnClick(event, treeId, treeNode) {
        zTreeObj.checkNode(treeNode, !treeNode.checked, true, true);
        event.preventDefault();
    }

    return {
        show:function() {
            $.getJSON('/<%=ModuleName%>/LoadForTree', function (json) {
                zTreeObj = $.fn.zTree.init($('#j_select_tree1'), setting, json);
                var orgstr = $(idDom).val();
                var name = '';
                if (orgstr != '') {
                    var nodeIds = orgstr.split(',');
                    $.each(nodeIds, function () {
                        var node = zTreeObj.getNodeByParam("Id", this, null);
                        name += ',' + node.Name;
                        zTreeObj.checkNode(node, true, true);
                    });
                    $(nameDom).val(name.substr(1));  //显示名称
                }
                zTreeObj.expandAll(true);
            });
        }
    };
}();
<%} %>

//添加（编辑）对话框
var editDlg = function () {
    var update = false;
    var show = function () {
        BJUI.dialog({ id: 'editDlg', title: '编辑对话框', target: '#editDlg' });
        $("#btnSave").on("click", function() {
            editDlg.save();
        });
    }
    return {
        add: function () {  //弹出添加
            update = false;
            show();
            $.CurrentDialog.find("form")[0].reset();  //reset方法只能通过dom调用
            $("#Id").val(0);
            
             <%if(Tools.NeedCascade(SourceTable)){ 
                Response.WriteLine("parentTree.show();");
            }%>
        },
        update: function (ret) {  //弹出编辑框
            update = true;
            show();
     <% foreach (ColumnSchema column in this.SourceTable.Columns) {  %>
            <%if(column.IsPrimaryKeyMember){%>
            $('#<%=column.Name%>').val(ret.<%=column.Name%>);         
            <%}else if(CSharpAlias[column.SystemType.FullName] == "bool") {%>
            $('#<%=column.Name%>').selectpicker('val', ret.<%=column.Name%>?"true":"false");
             <%}else if(CSharpAlias[column.SystemType.FullName] == "int") {%>
            $('#<%=column.Name%>').selectpicker('val', ret.<%=column.Name%>);
            <%} else{ %>   
             $('#<%=column.Name%>').val(ret.<%=column.Name%>);
            <%} %>
     <% } %>
            <%if(Tools.NeedCascade(SourceTable)){ 
                Response.WriteLine("parentTree.show();");
            }%>
        },
        save: function() {  //编辑-->保存
            $('#editForm').isValid(function (v) {
                if (!v) return;  //验证没通过
                $("#editForm").bjuiajax('ajaxForm', {
                    reload: false,
                    callback:function(json) {
                        list.reload();
                        ztree.reload();
                    }
                });
            });
        }
    };
}();

//删除
function del() {
    var selected = list.getSelectedObj();
    if (selected == null) return;

    $.getJSON('/<%=ModuleName%>/Delete?Id=' + selected.Id, function (data) {
        if (data.statusCode == "200") {
            list.reload();
            ztree.reload();
        }
        else {
            $(this).alertmsg('warn', data.message);
        }
    });
}

//自定义的编辑按钮
function edit() {
    var selected = list.getSelectedObj();
    if (selected == null) {
        return;
    }
    editDlg.update(selected);
}

function add() {
    editDlg.add();
}

function refresh() {
    list.reload();
}

//@@ sourceURL=<%=ModuleName%>.js